// File: pages/super-admin/index.js (Super Admin Dashboard)
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import SuperAdminLayout from '../../components/super-admin/SuperAdminLayout';
import PartnerOverview from '../../components/super-admin/PartnerOverview';
import GlobalDealsOverview from '../../components/super-admin/GlobalDealsOverview';
import SystemMetrics from '../../components/super-admin/SystemMetrics';
import RecentActivities from '../../components/super-admin/RecentActivities';
import { verifyUserAccess, ROLES } from '../../utils/auth';

export default function SuperAdminDashboard() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [dashboardData, setDashboardData] = useState(null);

  useEffect(() => {
    const checkAccess = async () => {
      // Verify the user has super admin access
      const hasAccess = await verifyUserAccess(ROLES.SUPER_ADMIN);
      
      if (!hasAccess) {
        router.push('/login');
        return;
      }

      // Fetch super admin dashboard data
      try {
        // This would be replaced with your actual API call
        const response = await fetch('/api/super-admin/dashboard', {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('auth_token')}`,
          },
        });

        if (!response.ok) {
          throw new Error('Failed to fetch super admin dashboard data');
        }

        const data = await response.json();
        setDashboardData(data);
      } catch (error) {
        console.error('Error fetching super admin dashboard data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    checkAccess();
  }, [router]);

  // Mock data for demonstration
  const mockDashboardData = {
    systemMetrics: {
      totalPartners: 42,
      activePartners: 38,
      totalUsers: 256,
      totalDeals: 1283,
      activeDeals: 437,
      closedDealsMonth: 68,
      revenueMonth: '$876,540',
      resourcesCount: 124
    },
    partnerSummary: [
      { id: 1, name: 'TechNova Solutions', tier: 'Gold', activeDeals: 23, activeUsers: 8, lastActivityDate: '2023-06-18T14:22:00Z' },
      { id: 2, name: 'Global Systems Inc.', tier: 'Gold', activeDeals: 18, activeUsers: 12, lastActivityDate: '2023-06-18T10:45:00Z' },
      { id: 3, name: 'NextGen Innovations', tier: 'Silver', activeDeals: 14, activeUsers: 6, lastActivityDate: '2023-06-17T16:30:00Z' },
      { id: 4, name: 'Avata Technologies', tier: 'Silver', activeDeals: 11, activeUsers: 5, lastActivityDate: '2023-06-17T09:15:00Z' },
      { id: 5, name: 'Prime Consulting', tier: 'Bronze', activeDeals: 8, activeUsers: 3, lastActivityDate: '2023-06-16T13:45:00Z' },
    ],
    recentDeals: [
      { id: 1, customer: 'Enterprise Corp', value: '$87,500', partner: 'TechNova Solutions', stage: 'Closed Won', date: '2023-06-17T14:30:00Z' },
      { id: 2, customer: 'Infinite Systems', value: '$54,300', partner: 'Global Systems Inc.', stage: 'Negotiation', date: '2023-06-16T11:20:00Z' },
      { id: 3, customer: 'Bright Future Ltd', value: '$43,200', partner: 'NextGen Innovations', stage: 'Proposal', date: '2023-06-15T09:45:00Z' },
      { id: 4, customer: 'Peak Performance', value: '$38,750', partner: 'Avata Technologies', stage: 'Closed Won', date: '2023-06-14T16:10:00Z' },
      { id: 5, customer: 'Sunrise Industries', value: '$29,800', partner: 'Prime Consulting', stage: 'Discovery', date: '2023-06-14T10:30:00Z' },
    ],
    recentActivities: [
      { id: 1, type: 'partner_added', description: 'New partner added: Quantum Solutions (Gold tier)', time: '2 hours ago', user: 'Admin' },
      { id: 2, type: 'deal_closed', description: 'Deal closed: Enterprise Corp - $87,500', time: '1 day ago', user: 'Sarah Johnson' },
      { id: 3, type: 'resource_added', description: 'New resource added: Q2 Product Roadmap', time: '2 days ago', user: 'Admin' },
      { id: 4, type: 'user_added', description: 'New user added: Michael Chen at Global Systems Inc.', time: '3 days ago', user: 'Admin' },
      { id: 5, type: 'partner_tier_changed', description: 'Partner tier changed: Prime Consulting (Bronze → Silver)', time: '4 days ago', user: 'Admin' },
    ]
  };

  if (isLoading) {
    return (
      <SuperAdminLayout>
        <div className="flex items-center justify-center h-screen">
          <div className="w-12 h-12 border-4 border-t-4 border-gray-200 rounded-full border-t-indigo-600 animate-spin"></div>
        </div>
      </SuperAdminLayout>
    );
  }

  // Use mock data for now
  const data = mockDashboardData;

  return (
    <SuperAdminLayout>
      <Head>
        <title>Partner Portal | Super Admin Dashboard</title>
      </Head>
      <div className="px-4 py-6 sm:px-6 lg:px-8">
        <div className="mb-6">
          <div className="flex flex-col items-start justify-between sm:flex-row sm:items-center">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">
                Super Admin Dashboard
              </h1>
              <p className="mt-1 text-sm text-gray-600">
                System-wide overview and management
              </p>
            </div>
            <div className="mt-4 flex space-x-3 sm:mt-0">
              <button className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Add Partner
              </button>
              <button className="inline-flex items-center px-4 py-2 text-sm font-medium text-indigo-700 bg-indigo-100 border border-transparent rounded-md hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                System Reports
              </button>
            </div>
          </div>
        </div>

        <SystemMetrics metrics={data.systemMetrics} />
        
        <div className="grid grid-cols-1 gap-6 mt-6 lg:grid-cols-2">
          <PartnerOverview partners={data.partnerSummary} />
          <GlobalDealsOverview deals={data.recentDeals} />
        </div>
        
        <div className="mt-6">
          <RecentActivities activities={data.recentActivities} />
        </div>
      </div>
    </SuperAdminLayout>
  );
}

// File: components/super-admin/SuperAdminLayout.js
import { useState, Fragment } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { Dialog, Transition } from '@headlessui/react';
import { 
  HomeIcon, OfficeBuildingIcon, UsersIcon, BriefcaseIcon, 
  DocumentTextIcon, ChartBarIcon, CogIcon, XIcon, MenuIcon,
  CurrencyDollarIcon, GiftIcon, BellIcon
} from '@heroicons/react/outline';

export default function SuperAdminLayout({ children }) {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const router = useRouter();

  const navigation = [
    { name: 'Dashboard', href: '/super-admin', icon: HomeIcon },
    { name: 'Partners', href: '/super-admin/partners', icon: OfficeBuildingIcon },
    { name: 'Users', href: '/super-admin/users', icon: UsersIcon },
    { name: 'Deals', href: '/super-admin/deals', icon: BriefcaseIcon },
    { name: 'Resources', href: '/super-admin/resources', icon: DocumentTextIcon },
    { name: 'Analytics', href: '/super-admin/analytics', icon: ChartBarIcon },
    { name: 'Rewards', href: '/super-admin/rewards', icon: GiftIcon },
    { name: 'Announcements', href: '/super-admin/announcements', icon: BellIcon },
    { name: 'Settings', href: '/super-admin/settings', icon: CogIcon },
  ];

  const handleLogout = () => {
    localStorage.removeItem('auth_token');
    localStorage.removeItem('user_data');
    router.push('/login');
  };

  return (
    <div className="min-h-screen bg-gray-100">
      <Transition.Root show={sidebarOpen} as={Fragment}>
        <Dialog as="div" className="fixed inset-0 z-40 flex md:hidden" onClose={setSidebarOpen}>
          <Transition.Child
            as={Fragment}
            enter="transition-opacity ease-linear duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="transition-opacity ease-linear duration-300"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <Dialog.Overlay className="fixed inset-0 bg-gray-600 bg-opacity-75" />
          </Transition.Child>
          <Transition.Child
            as={Fragment}
            enter="transition ease-in-out duration-300 transform"
            enterFrom="-translate-x-full"
            enterTo="translate-x-0"
            leave="transition ease-in-out duration-300 transform"
            leaveFrom="translate-x-0"
            leaveTo="-translate-x-full"
          >
            <div className="relative flex flex-col flex-1 w-full max-w-xs pt-5 pb-4 bg-white">
              <Transition.Child
                as={Fragment}
                enter="ease-in-out duration-300"
                enterFrom="opacity-0"
                enterTo="opacity-100"
                leave="ease-in-out duration-300"
                leaveFrom="opacity-100"
                leaveTo="opacity-0"
              >
                <div className="absolute top-0 right-0 pt-2 -mr-12">
                  <button
                    type="button"
                    className="flex items-center justify-center w-10 h-10 ml-1 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
                    onClick={() => setSidebarOpen(false)}
                  >
                    <span className="sr-only">Close sidebar</span>
                    <XIcon className="w-6 h-6 text-white" aria-hidden="true" />
                  </button>
                </div>
              </Transition.Child>
              <div className="flex items-center flex-shrink-0 px-4">
                <img className="w-auto h-8" src="/logo.svg" alt="FlytBase Logo" />
                <span className="ml-2 text-xl font-bold text-purple-700">Super Admin</span>
              </div>
              <div className="flex-1 h-0 mt-5 overflow-y-auto">
                <nav className="px-2 space-y-1">
                  {navigation.map((item) => (
                    <Link key={item.name} href={item.href}>
                      <a
                        className={`${
                          router.pathname === item.href || (item.href !== '/super-admin' && router.pathname.startsWith(item.href))
                            ? 'bg-purple-50 text-purple-600'
                            : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                        } group flex items-center px-2 py-2 text-base font-medium rounded-md`}
                      >
                        <item.icon
                          className={`${
                            router.pathname === item.href || (item.href !== '/super-admin' && router.pathname.startsWith(item.href))
                              ? 'text-purple-600'
                              : 'text-gray-400 group-hover:text-gray-500'
                          } mr-4 flex-shrink-0 h-6 w-6`}
                          aria-hidden="true"
                        />
                        {item.name}
                      </a>
                    </Link>
                  ))}
                </nav>
              </div>
            </div>
          </Transition.Child>
        </Dialog>
      </Transition.Root>

      {/* Static sidebar for desktop */}
      <div className="hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0">
        <div className="flex flex-col flex-grow pt-5 overflow-y-auto bg-white border-r border-gray-200">
          <div className="flex items-center flex-shrink-0 px-4">
            <img className="w-auto h-8" src="/logo.svg" alt="FlytBase Logo" />
            <span className="ml-2 text-xl font-bold text-purple-700">Super Admin</span>
          </div>
          <div className="flex flex-col flex-grow mt-5">
            <nav className="flex-1 px-2 pb-4 space-y-1">
              {navigation.map((item) => (
                <Link key={item.name} href={item.href}>
                  <a
                    className={`${
                      router.pathname === item.href || (item.href !== '/super-admin' && router.pathname.startsWith(item.href))
                        ? 'bg-purple-50 text-purple-600'
                        : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                    } group flex items-center px-2 py-2 text-sm font-medium rounded-md`}
                  >
                    <item.icon
                      className={`${
                        router.pathname === item.href || (item.href !== '/super-admin' && router.pathname.startsWith(item.href))
                          ? 'text-purple-600'
                          : 'text-gray-400 group-hover:text-gray-500'
                      } mr-3 flex-shrink-0 h-6 w-6`}
                      aria-hidden="true"
                    />
                    {item.name}
                  </a>
                </Link>
              ))}
            </nav>
            <div className="px-4 mt-auto">
              <button
                onClick={handleLogout}
                className="flex items-center justify-center w-full px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
              >
                Logout
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="md:pl-64">
        <div className="flex flex-col flex-1">
          <div className="sticky top-0 z-10 flex flex-shrink-0 h-16 bg-white shadow md:hidden">
            <button
              type="button"
              className="px-4 text-gray-500 border-r border-gray-200 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500 md:hidden"
              onClick={() => setSidebarOpen(true)}
            >
              <span className="sr-only">Open sidebar</span>
              <MenuIcon className="w-6 h-6" aria-hidden="true" />
            </button>
            <div className="flex justify-between flex-1 px-4">
              <div className="flex flex-1">
                <div className="flex items-center flex-shrink-0">
                  <img className="w-auto h-8" src="/logo.svg" alt="FlytBase Logo" />
                  <span className="ml-2 text-xl font-bold text-purple-700">Super Admin</span>
                </div>
              </div>
            </div>
          </div>

          <main className="flex-1">
            {children}
          </main>
        </div>
      </div>
    </div>
  );
}

// File: components/super-admin/SystemMetrics.js
export default function SystemMetrics({ metrics }) {
  return (
    <div>
      <h2 className="text-lg font-medium text-gray-900">System Metrics</h2>
      <dl className="grid grid-cols-1 gap-5 mt-4 sm:grid-cols-2 lg:grid-cols-4">
        <div className="px-4 py-5 overflow-hidden bg-white rounded-lg shadow sm:p-6">
          <dt className="text-sm font-medium text-gray-500 truncate">Total Partners</dt>
          <dd className="mt-1 text-3xl font-semibold text-gray-900">{metrics.totalPartners}</dd>
          <dt className="mt-2 text-sm font-medium text-gray-500">Active: {metrics.activePartners}</dt>
        </div>
        
        <div className="px-4 py-5 overflow-hidden bg-white rounded-lg shadow sm:p-6">
          <dt className="text-sm font-medium text-gray-500 truncate">Total Users</dt>
          <dd className="mt-1 text-3xl font-semibold text-gray-900">{metrics.totalUsers}</dd>
        </div>
        
        <div className="px-4 py-5 overflow-hidden bg-white rounded-lg shadow sm:p-6">
          <dt className="text-sm font-medium text-gray-500 truncate">Deals</dt>
          <dd className="mt-1 text-3xl font-semibold text-gray-900">{metrics.activeDeals} <span className="text-base font-normal text-gray-500">/ {metrics.totalDeals}</span></dd>
          <dt className="mt-2 text-sm font-medium text-gray-500">Closed this month: {metrics.closedDealsMonth}</dt>
        </div>
        
        <div className="px-4 py-5 overflow-hidden bg-white rounded-lg shadow sm:p-6">
          <dt className="text-sm font-medium text-gray-500 truncate">Monthly Revenue</dt>
          <dd className="mt-1 text-3xl font-semibold text-gray-900">{metrics.revenueMonth}</dd>
        </div>
      </dl>
    </div>
  );
}

// File: components/super-admin/PartnerOverview.js
import Link from 'next/link';
import { format, parseISO } from 'date-fns';

export default function PartnerOverview({ partners }) {
  const getTierColor = (tier) => {
    switch (tier) {
      case 'Gold': return 'bg-yellow-100 text-yellow-800';
      case 'Silver': return 'bg-gray-100 text-gray-800';
      case 'Bronze': return 'bg-amber-100 text-amber-800';
      default: return 'bg-blue-100 text-blue-800';
    }
  };

  return (
    <div className="overflow-hidden bg-white rounded-lg shadow">
      <div className="px-4 py-5 sm:px-6">
        <div className="flex items-center justify-between">
          <h2 className="text-lg font-medium text-gray-900">Partner Overview</h2>
          <Link href="/super-admin/partners">
            <a className="text-sm font-medium text-purple-600 hover:text-purple-500">
              View All
            </a>
          </Link>
        </div>
      </div>
      <div className="px-4 pb-5 sm:p-0">
        <div className="border-t border-gray-200 divide-y divide-gray-200">
          {partners.map((partner) => (
            <div key={partner.id} className="px-4 py-4 sm:px-6">
              <div className="flex items-center justify-between">
                <div>
                  <Link href={`/super-admin/partners/${partner.id}`}>
                    <a className="text-sm font-medium text-purple-600 hover:underline">{partner.name}</a>
                  </Link>
                  <span className={`ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getTierColor(partner.tier)}`}>
                    {partner.tier}
                  </span>
                </div>
                <div className="flex items-center space-x-4">
                  <div className="text-right">
                    <p className="text-sm font-medium text-gray-900">{partner.activeDeals} Deals</p>
                    <p className="text-sm text-gray-500">{partner.activeUsers} Users</p>
                  </div>
                  <div className="text-right text-sm text-gray-500">
                    Last activity:<br />
                    {format(parseISO(partner.lastActivityDate), 'MMM d, h:mm a')}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
      <div className="px-4 py-4 border-t border-gray-200 sm:px-6">
        <Link href="/super-admin/partners/new">
          <a className="text-sm font-medium text-purple-600 hover:text-purple-500">
            + Add Partner
          </a>
        </Link>
      </div>
    </div>
  );
}

// File: components/super-admin/GlobalDealsOverview.js
import Link from 'next/link';
import { format, parseISO } from 'date-fns';

export default function GlobalDealsOverview({ deals }) {
  const getStageColor = (stage) => {
    switch (stage) {
      case 'Discovery': return 'bg-blue-100 text-blue-800';
      case 'Proposal': return 'bg-yellow-100 text-yellow-800';
      case 'Negotiation': return 'bg-purple-100 text-purple-800';
      case 'Closed Won': return 'bg-green-100 text-green-800';
      case 'Closed Lost': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="overflow-hidden bg-white rounded-lg shadow">
      <div className="px-4 py-5 sm:px-6">
        <div className="flex items-center justify-between">
          <h2 className="text-lg font-medium text-gray-900">Recent Deals</h2>
          <Link href="/super-admin/deals">
            <a className="text-sm font-medium text-purple-600 hover:text-purple-500">
              View All
            </a>
          </Link>
        </div>
      </div>
      <div className="px-4 pb-5 sm:p-0">
        <div className="border-t border-gray-200 divide-y divide-gray-200">
          {deals.map((deal) => (
            <div key={deal.id} className="px-4 py-4 sm:px-6">
              <div className="flex items-center justify-between">
                <div>
                  <Link href={`/super-admin/deals/${deal.id}`}>
                    <a className="text-sm font-medium text-purple-600 hover:underline">{deal.customer}</a>
                  </Link>
                  <p className="text-sm text-gray-500">{deal.partner}</p>
                </div>
                <div className="flex items-center space-x-4">
                  <div className="text-right">
                    <p className="text-sm font-medium text-gray-900">{deal.value}</p>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStageColor(deal.stage)}`}>
                      {deal.stage}
                    </span>
                  </div>
                  <div className="text-right text-sm text-gray-500">
                    {format(parseISO(deal.date), 'MMM d, yyyy')}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

// File: components/super-admin/RecentActivities.js
import Link from 'next/link';

export default function RecentActivities({ activities }) {
  const getActivityIcon = (type) => {
    switch (type) {
      case 'partner_added': return '🏢';
      case 'deal_closed': return '💰';
      case 'resource_added': return '📄';
      case 'user_added': return '👤';
      case 'partner_tier_changed': return '⭐';
      default: return '📝';
    }
  };

  return (
    <div className="overflow-hidden bg-white rounded-lg shadow">
      <div className="px-4 py-5 sm:px-6">
        <h2 className="text-lg font-medium text-gray-900">Recent System Activities</h2>
      </div>
      <div className="px-4 pt-2 pb-5">
        <div className="flow-root">
          <ul className="-my-5 divide-y divide-gray-200">
            {activities.map((activity) => (
              <li key={activity.id} className="py-4">
                <div className="flex items-center space-x-4">
                  <div className="flex-shrink-0 text-2xl">{getActivityIcon(activity.type)}</div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm text-gray-900">
                      {activity.description}
                    </p>
                    <p className="text-sm text-gray-500">
                      By: {activity.user}
                    </p>
                  </div>
                  <div className="text-sm text-right text-gray-500 whitespace-nowrap">
                    {activity.time}
                  </div>
                </div>
              </li>
            ))}
          </ul>
        </div>
      </div>
      <div className="px-4 py-4 border-t border-gray-200 sm:px-6">
        <Link href="/super-admin/activities">
          <a className="text-sm font-medium text-purple-600 hover:text-purple-500">
            View all activities <span aria-hidden="true">&rarr;</span>
          </a>
        </Link>
      </div>
    </div>
  );
}

// File: pages/super-admin/partners/index.js (Partners List)
import { useState, useEffect } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import SuperAdminLayout from '../../../components/super-admin/SuperAdminLayout';
import { PlusIcon, SearchIcon, FilterIcon } from '@heroicons/react/outline';
import { format, parseISO } from 'date-fns';
import { verifyUserAccess, ROLES } from '../../../utils/auth';

export default function PartnersList() {
  const [partners, setPartners] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterTier, setFilterTier] = useState('all');

  useEffect(() => {
    const fetchPartners = async () => {
      // Verify the user has super admin access
      const hasAccess = await verifyUserAccess(ROLES.SUPER_ADMIN);
      
      if (!hasAccess) {
        router.push('/login');
        return;
      }

      try {
        // This would be replaced with your actual API call
        const response = await fetch('/api/super-admin/partners', {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('auth_token')}`,
          },
        });

        if (!response.ok) {
          throw new Error('Failed to fetch partners');
        }

        const data = await response.json();
        setPartners(data.partners || []);
      } catch (error) {
        console.error('Error fetching partners:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchPartners();
  }, []);

  // Mock partners data
  const mockPartners = [
    { 
      id: 1, 
      name: 'TechNova Solutions', 
      tier: 'Gold',
      status: 'active',
      contactName: 'Jessica Wong',
      contactEmail: 'jessica@technova.com',
      contactPhone: '(555) 123-4567',
      teamSize: 8,
      activeDeals: 23,
      totalRevenue: '$1,254,750',
      createdAt: '2021-03-15T00:00:00Z'
    },
    { 
      id: 2, 
      name: 'Global Systems Inc.', 
      tier: 'Gold',
      status: 'active',
      contactName: 'Robert Chen',
      contactEmail: 'robert@globalsystems.com',
      contactPhone: '(555) 234-5678',
      teamSize: 12,
      activeDeals: 18,
      totalRevenue: '$987,350',
      createdAt: '2021-05-22T00:00:00Z'
    },
    { 
      id: 3, 