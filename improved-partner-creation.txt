// File: pages/super-admin/partners/new.js
import { useState } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import SuperAdminLayout from '../../../components/super-admin/SuperAdminLayout';
import MultiStepFormProgress from '../../../components/common/MultiStepFormProgress';
import CompanyInfoForm from '../../../components/super-admin/partner-forms/CompanyInfoForm';
import ContactInfoForm from '../../../components/super-admin/partner-forms/ContactInfoForm';
import AdminAccountForm from '../../../components/super-admin/partner-forms/AdminAccountForm';
import ReviewForm from '../../../components/super-admin/partner-forms/ReviewForm';
import { useMultiStepForm } from '../../../hooks/useMultiStepForm';
import { createPartner } from '../../../services/partnerService';

export default function CreatePartner() {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    // Company information
    name: '',
    tier: 'Silver',
    website: '',
    address: '',
    description: '',
    
    // Primary contact
    contactName: '',
    contactEmail: '',
    contactPhone: '',
    contactTitle: '',
    
    // Admin account
    adminFirstName: '',
    adminLastName: '',
    adminEmail: '',
    adminPhone: '',
    sendWelcomeEmail: true
  });
  
  // Define form steps
  const steps = [
    { id: 'company', label: 'Company Info' },
    { id: 'contact', label: 'Primary Contact' },
    { id: 'admin', label: 'Admin Account' },
    { id: 'review', label: 'Review' }
  ];
  
  // Custom hook to manage multi-step form
  const { 
    currentStep, 
    currentStepIndex, 
    goToNextStep, 
    goToPreviousStep, 
    isFirstStep, 
    isLastStep 
  } = useMultiStepForm(steps);
  
  // Update form data
  const updateFormData = (data) => {
    setFormData(prev => ({
      ...prev,
      ...data
    }));
  };
  
  // Handle form submission
  const handleSubmit = async () => {
    setIsSubmitting(true);
    
    try {
      const response = await createPartner(formData);
      
      // Show success message
      window.alert('Partner created successfully!');
      
      // Redirect to partner details page
      router.push(`/super-admin/partners/${response.partnerId}`);
    } catch (error) {
      console.error('Error creating partner:', error);
      window.alert(`Failed to create partner: ${error.message || 'Unknown error'}`);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Render current step
  const renderStep = () => {
    switch (currentStep.id) {
      case 'company':
        return (
          <CompanyInfoForm 
            data={formData}
            onUpdate={updateFormData}
            onNext={goToNextStep}
          />
        );
      case 'contact':
        return (
          <ContactInfoForm
            data={formData}
            onUpdate={updateFormData}
            onNext={goToNextStep}
            onBack={goToPreviousStep}
          />
        );
      case 'admin':
        return (
          <AdminAccountForm
            data={formData}
            onUpdate={updateFormData}
            onNext={goToNextStep}
            onBack={goToPreviousStep}
          />
        );
      case 'review':
        return (
          <ReviewForm
            data={formData}
            onSubmit={handleSubmit}
            onBack={goToPreviousStep}
            isSubmitting={isSubmitting}
          />
        );
      default:
        return null;
    }
  };
  
  return (
    <SuperAdminLayout>
      <Head>
        <title>Add New Partner | Super Admin</title>
      </Head>
      
      <div className="py-6">
        <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="md:flex md:items-center md:justify-between">
            <div className="flex-1 min-w-0">
              <h2 className="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                Add New Partner
              </h2>
            </div>
            <div className="mt-4 flex md:mt-0 md:ml-4">
              <button
                type="button"
                onClick={() => router.push('/super-admin/partners')}
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
        
        <div className="mt-8 max-w-3xl mx-auto sm:px-6 lg:px-8">
          {/* Progress Indicator */}
          <div className="mb-8">
            <MultiStepFormProgress 
              steps={steps} 
              currentStepIndex={currentStepIndex} 
            />
          </div>
          
          {/* Form */}
          <div className="bg-white shadow overflow-hidden sm:rounded-md">
            <div className="px-4 py-5 sm:p-6">
              {renderStep()}
            </div>
          </div>
        </div>
      </div>
    </SuperAdminLayout>
  );
}

// File: hooks/useMultiStepForm.js
import { useState } from 'react';

export function useMultiStepForm(steps) {
  const [currentStepIndex, setCurrentStepIndex] = useState(0);
  
  function goToNextStep() {
    setCurrentStepIndex(i => {
      if (i >= steps.length - 1) return i;
      return i + 1;
    });
  }
  
  function goToPreviousStep() {
    setCurrentStepIndex(i => {
      if (i <= 0) return i;
      return i - 1;
    });
  }
  
  function goToStep(index) {
    setCurrentStepIndex(index);
  }
  
  return {
    currentStep: steps[currentStepIndex],
    currentStepIndex,
    steps,
    isFirstStep: currentStepIndex === 0,
    isLastStep: currentStepIndex === steps.length - 1,
    goToNextStep,
    goToPreviousStep,
    goToStep
  };
}

// File: components/common/MultiStepFormProgress.js
export default function MultiStepFormProgress({ steps, currentStepIndex }) {
  return (
    <div>
      <div className="flex items-center">
        {steps.map((step, index) => (
          <div key={step.id} className="flex items-center relative">
            <div className={`${
              currentStepIndex >= index
                ? 'bg-indigo-600'
                : 'bg-gray-300'
              } rounded-full h-8 w-8 flex items-center justify-center text-white font-medium`}
            >
              {currentStepIndex > index ? (
                <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
              ) : (
                index + 1
              )}
            </div>
            
            {index < steps.length - 1 && (
              <div className={`w-full h-1 ${
                currentStepIndex > index ? 'bg-indigo-600' : 'bg-gray-300'
              }`} />
            )}
          </div>
        ))}
      </div>
      
      <div className="flex justify-between mt-2">
        {steps.map((step) => (
          <div key={step.id} className="text-sm font-medium">
            {step.label}
          </div>
        ))}
      </div>
    </div>
  );
}

// File: components/common/FormInput.js
export default function FormInput({
  id,
  label,
  type = 'text',
  required = false,
  error,
  helperText,
  ...props
}) {
  return (
    <div>
      <label htmlFor={id} className="block text-sm font-medium text-gray-700">
        {label}{required && <span className="text-red-500">*</span>}
      </label>
      <input
        id={id}
        name={id}
        type={type}
        className={`mt-1 block w-full rounded-md border ${
          error ? 'border-red-300' : 'border-gray-300'
        } shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm`}
        {...props}
      />
      {error && (
        <p className="mt-1 text-sm text-red-600">{error}</p>
      )}
      {helperText && !error && (
        <p className="mt-1 text-sm text-gray-500">{helperText}</p>
      )}
    </div>
  );
}

// File: components/common/FormTextarea.js
export default function FormTextarea({
  id,
  label,
  rows = 3,
  required = false,
  error,
  helperText,
  ...props
}) {
  return (
    <div>
      <label htmlFor={id} className="block text-sm font-medium text-gray-700">
        {label}{required && <span className="text-red-500">*</span>}
      </label>
      <textarea
        id={id}
        name={id}
        rows={rows}
        className={`mt-1 block w-full rounded-md border ${
          error ? 'border-red-300' : 'border-gray-300'
        } shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm`}
        {...props}
      />
      {error && (
        <p className="mt-1 text-sm text-red-600">{error}</p>
      )}
      {helperText && !error && (
        <p className="mt-1 text-sm text-gray-500">{helperText}</p>
      )}
    </div>
  );
}

// File: components/common/FormSelect.js
export default function FormSelect({
  id,
  label,
  options,
  required = false,
  error,
  helperText,
  ...props
}) {
  return (
    <div>
      <label htmlFor={id} className="block text-sm font-medium text-gray-700">
        {label}{required && <span className="text-red-500">*</span>}
      </label>
      <select
        id={id}
        name={id}
        className={`mt-1 block w-full rounded-md border ${
          error ? 'border-red-300' : 'border-gray-300'
        } shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm`}
        {...props}
      >
        {options.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>
      {error && (
        <p className="mt-1 text-sm text-red-600">{error}</p>
      )}
      {helperText && !error && (
        <p className="mt-1 text-sm text-gray-500">{helperText}</p>
      )}
    </div>
  );
}

// File: components/common/FormCheckbox.js
export default function FormCheckbox({
  id,
  label,
  description,
  ...props
}) {
  return (
    <div className="relative flex items-start">
      <div className="flex items-center h-5">
        <input
          id={id}
          name={id}
          type="checkbox"
          className="h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
          {...props}
        />
      </div>
      <div className="ml-3 text-sm">
        <label htmlFor={id} className="font-medium text-gray-700">
          {label}
        </label>
        {description && (
          <p className="text-gray-500">{description}</p>
        )}
      </div>
    </div>
  );
}

// File: components/super-admin/partner-forms/CompanyInfoForm.js
import { useForm } from 'react-hook-form';
import FormInput from '../../common/FormInput';
import FormSelect from '../../common/FormSelect';
import FormTextarea from '../../common/FormTextarea';

export default function CompanyInfoForm({ data, onUpdate, onNext }) {
  const { 
    register, 
    handleSubmit, 
    formState: { errors } 
  } = useForm({
    defaultValues: {
      name: data.name || '',
      tier: data.tier || 'Silver',
      website: data.website || '',
      address: data.address || '',
      description: data.description || ''
    }
  });

  const tierOptions = [
    { value: 'Gold', label: 'Gold' },
    { value: 'Silver', label: 'Silver' },
    { value: 'Bronze', label: 'Bronze' },
  ];

  const onSubmit = (formData) => {
    onUpdate(formData);
    onNext();
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div>
        <h3 className="text-lg font-medium text-gray-900">Company Information</h3>
        <p className="mt-1 text-sm text-gray-500">
          Enter the basic information about the partner organization.
        </p>
      </div>

      <FormInput
        id="name"
        label="Company Name"
        required
        error={errors.name?.message}
        {...register('name', { 
          required: 'Company name is required' 
        })}
      />

      <FormSelect
        id="tier"
        label="Partner Tier"
        options={tierOptions}
        required
        error={errors.tier?.message}
        {...register('tier', { 
          required: 'Partner tier is required' 
        })}
      />

      <FormInput
        id="website"
        label="Website"
        error={errors.website?.message}
        {...register('website', {
          pattern: {
            value: /^(https?:\/\/)?([\da-z.-]+)\.([a-z.]{2,6})([/\w .-]*)*\/?$/,
            message: 'Please enter a valid URL'
          }
        })}
      />

      <FormTextarea
        id="address"
        label="Address"
        error={errors.address?.message}
        {...register('address')}
      />

      <FormTextarea
        id="description"
        label="Description"
        rows={4}
        error={errors.description?.message}
        placeholder="Brief description of the partner organization..."
        {...register('description')}
      />

      <div className="flex justify-end pt-5">
        <button
          type="submit"
          className="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Next
        </button>
      </div>
    </form>
  );
}

// File: components/super-admin/partner-forms/ContactInfoForm.js
import { useForm } from 'react-hook-form';
import FormInput from '../../common/FormInput';

export default function ContactInfoForm({ data, onUpdate, onNext, onBack }) {
  const { 
    register, 
    handleSubmit, 
    formState: { errors } 
  } = useForm({
    defaultValues: {
      contactName: data.contactName || '',
      contactEmail: data.contactEmail || '',
      contactPhone: data.contactPhone || '',
      contactTitle: data.contactTitle || ''
    }
  });

  const onSubmit = (formData) => {
    onUpdate(formData);
    onNext();
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div>
        <h3 className="text-lg font-medium text-gray-900">Primary Contact Information</h3>
        <p className="mt-1 text-sm text-gray-500">
          Enter details of the primary business contact at this partner.
        </p>
      </div>

      <FormInput
        id="contactName"
        label="Contact Name"
        required
        error={errors.contactName?.message}
        {...register('contactName', { 
          required: 'Contact name is required' 
        })}
      />

      <FormInput
        id="contactTitle"
        label="Job Title"
        error={errors.contactTitle?.message}
        {...register('contactTitle')}
      />

      <FormInput
        id="contactEmail"
        label="Email Address"
        type="email"
        required
        error={errors.contactEmail?.message}
        {...register('contactEmail', { 
          required: 'Email is required',
          pattern: {
            value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
            message: 'Please enter a valid email address'
          }
        })}
      />

      <FormInput
        id="contactPhone"
        label="Phone Number"
        error={errors.contactPhone?.message}
        {...register('contactPhone', {
          pattern: {
            value: /^[\d\s+()-]{10,15}$/,
            message: 'Please enter a valid phone number'
          }
        })}
      />

      <div className="flex justify-between pt-5">
        <button
          type="button"
          onClick={onBack}
          className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Back
        </button>
        <button
          type="submit"
          className="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Next
        </button>
      </div>
    </form>
  );
}

// File: components/super-admin/partner-forms/AdminAccountForm.js
import { useForm } from 'react-hook-form';
import FormInput from '../../common/FormInput';
import FormCheckbox from '../../common/FormCheckbox';

export default function AdminAccountForm({ data, onUpdate, onNext, onBack }) {
  const { 
    register, 
    handleSubmit, 
    formState: { errors } 
  } = useForm({
    defaultValues: {
      adminFirstName: data.adminFirstName || '',
      adminLastName: data.adminLastName || '',
      adminEmail: data.adminEmail || '',
      adminPhone: data.adminPhone || '',
      sendWelcomeEmail: data.sendWelcomeEmail !== undefined ? data.sendWelcomeEmail : true
    }
  });

  const onSubmit = (formData) => {
    onUpdate(formData);
    onNext();
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div>
        <h3 className="text-lg font-medium text-gray-900">Partner Admin Account</h3>
        <p className="mt-1 text-sm text-gray-500">
          Create the administrator account for this partner. This person will have admin access to manage their team.
        </p>
      </div>

      <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
        <FormInput
          id="adminFirstName"
          label="First Name"
          required
          error={errors.adminFirstName?.message}
          {...register('adminFirstName', { 
            required: 'First name is required' 
          })}
        />

        <FormInput
          id="adminLastName"
          label="Last Name"
          required
          error={errors.adminLastName?.message}
          {...register('adminLastName', { 
            required: 'Last name is required' 
          })}
        />
      </div>

      <FormInput
        id="adminEmail"
        label="Email Address"
        type="email"
        required
        error={errors.adminEmail?.message}
        helperText="This email will be used for login and notifications"
        {...register('adminEmail', { 
          required: 'Email is required',
          pattern: {
            value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
            message: 'Please enter a valid email address'
          }
        })}
      />

      <FormInput
        id="adminPhone"
        label="Phone Number"
        error={errors.adminPhone?.message}
        {...register('adminPhone', {
          pattern: {
            value: /^[\d\s+()-]{10,15}$/,
            message: 'Please enter a valid phone number'
          }
        })}
      />

      <FormCheckbox
        id="sendWelcomeEmail"
        label="Send welcome email"
        description="Send an email with login instructions to the admin"
        {...register('sendWelcomeEmail')}
      />

      <div className="flex justify-between pt-5">
        <button
          type="button"
          onClick={onBack}
          className="py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Back
        </button>
        <button
          type="submit"
          className="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Next
        </button>
      </div>
    </form>
  );
}

// File: components/super-admin/partner-forms/ReviewForm.js
export default function ReviewForm({ data, onSubmit, onBack, isSubmitting }) {
  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-medium text-gray-900">Review Information</h3>
        <p className="mt-1 text-sm text-gray-500">
          Please review the partner information before submitting.
        </p>
      </div>
      
      <div className="bg-gray-50 shadow overflow-hidden sm:rounded-lg">
        <div className="px-4 py-5 sm:px-6">
          <h3 className="text-lg leading-6 font-medium text-gray-900">Partner Details</h3>
        </div>
        <div className="border-t border-gray-200">
          <dl>
            <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
              <dt className="text-sm font-medium text-gray-500">Company Name</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{data.name}</dd>
            </div>
            <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
              <dt className="text-sm font-medium text-gray-500">Partner Tier</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{data.tier}</dd>
            </div>
            {data.website && (
              <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Website</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{data.website}</dd>
              </div>
            )}
            {data.address && (
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Address</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{data.address}</dd>
              </div>
            )}
          </dl>
        </div>
      </div>
      
      <div className="bg-gray-50 shadow overflow-hidden sm:rounded-lg">
        <div className="px-4 py-5 sm:px-6">
          <h3 className="text-lg leading-6 font-medium text-gray-900">Primary Contact</h3>
        </div>
        <div className="border-t border-gray-200">
          <dl>
            <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
              <dt className="text-sm font-medium text-gray-500">Name</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{data.contactName}</dd>
            </div>
            {data.contactTitle && (
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Title</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{data.contactTitle}</dd>
              </div>
            )}
            <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
              <dt className="text-sm font-medium text-gray-500">Email</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{data.contactEmail}</dd>
            </div>
            {data.contactPhone && (
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Phone</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{data.contactPhone}</dd>
              </div>
            )}
          </dl>
        </div>
      </div>
      
      <div className="bg-gray-50 shadow overflow-hidden sm:rounded-lg">
        <div className="px-4 py-5 sm:px-6">
          <h3 className="text-lg leading-6 font-medium text-gray-900">Admin Account</h3>
        </div>
        <div className="border-t border-gray-200">
          <dl>
            <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
              <dt className="text-sm font-medium text-gray-500">Name</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                {data.adminFirstName} {data.adminLastName}
              </dd>
            </div>
            <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
              <dt className="text-sm font-medium text-gray-500">Email</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{data.adminEmail}</dd>
            </div>
            {data.adminPhone && (
              <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Phone</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{data.adminPhone}</dd>
              </div>
            )}
            <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
              <dt className="text-sm font-medium text-gray-500">Send Welcome Email</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                {data.sendWelcomeEmail ? 'Yes' : 'No'}
              </dd>
            </div>
          </dl>
        </div>
      </div>
      
      <div className="flex justify-between pt-5">